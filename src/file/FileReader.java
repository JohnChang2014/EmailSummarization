package file;

import java.io.*;
import java.util.ArrayList;

import com.itextpdf.text.pdf.PdfReader;
import com.itextpdf.text.pdf.parser.PdfTextExtractor;

public class FileReader {
	public ArrayList<String> readPDFFile(String filename) {
		ArrayList<String> result = new ArrayList<String>();
		try {
            PdfReader reader = new PdfReader(filename);
            String content   = "";
            int n_pages      = reader.getNumberOfPages();
            // extract all page content
            for (int n = 1; n <= n_pages; n++) content += PdfTextExtractor.getTextFromPage(reader, n) + System.getProperty("line.separator");
            
            // remove all useless whitespace generated by PdfReader 
            for (String sentence : content.split("\\n")) {
            	String sen = "";
            	for (String character : sentence.split("\\s")) sen += character;
            	result.add(sen);
            }
            return result;
            
        } catch (IOException e) {
            e.printStackTrace();
        }
		return result;
	}
	/*

	public static void main(String[] args) throws Exception {
        
 
		String filename = "/Volumes/Data/03-ShareData/Dropbox/00-Courses Data/Fall 2013/Natural Language Processing/Final Project/Dataset/Original Mails/33 5th Floor.pdf";
		
		FileReader fr = new FileReader();
		fr.readFile(filename);
		
		InputStream is = null;
		InputStreamReader isr = null;
		BufferedReader br = null;

		try {
			// open input stream test.txt for reading purpose.
			is = new FileInputStream("/Volumes/Data/03-ShareData/Dropbox/00-Courses Data/Fall 2013/Natural Language Processing/Final Project/Dataset/Original Mails/33 5th Floor.pdf");

			// create new input stream reader
			isr = new InputStreamReader(is, "UTF8");

			// create new buffered reader
			br = new BufferedReader(isr);

			int value = 0;

			// reads to the end of the stream
			while ((value = br.read()) != -1) {
				// converts int to character
				char c = (char) value;

				// prints character
				System.out.println(c);
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			// releases resources associated with the streams
			if (is != null) is.close();
			if (isr != null) isr.close();
			if (br != null) br.close();
		}
	} */
}
